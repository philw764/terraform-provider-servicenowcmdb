package resources
///////////////////////////////////////////////////////////////////////////////////////////////////
//  ****WARNING***    : This is automatically generated code  using the generatprovidersource
//                      utility in this package, any edits to this file will be overwritten
//                      and lost.  Refer to the readme.md in the generateprovidersource directory
//                       for details on how to regenerate this code.
// Provider Version    : {{.Version}}
// Generator Version   : {{.GeneratorVersion}}
//
//  Description       :   This file is the resource provider for the {{.CiName}} CMDB Class.  This code is executed
//                        when the servicenowcmdb_{{.CiLabel}} keyword is used in a terraform script (*.tf) file
//
//                        This file is will need to be regenerated if the ServiceNow CMDB base CI Class
//                        "cmdb_ci" or of the {{.CiName}} CI Class is modified.
///////////////////////////////////////////////////////////////////////////////////////////////////
import (

"context"
"encoding/json"
"terraform-provider-servicenowcmdb/servicenowcmdb/client"
//"fmt"
"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)
// This constant stores the name of the CI and is used to construct the URL to ServiceNow
const CiName{{.CiName}}  = "{{.Result.Name}}"

// This is the structure to construct the JSON payload when POSTing to ServiceNow.  This is needed because
// ServiceNow has strict parsing on the JSON Data and will fail if the JSON format doesn't match exactly.
// This is essentially the same as {{.CiLabelCamelCase}}Get but does not contain the "value", "link" and
// "display_value" fields for reference objects.
//
// The generateprovidersource utility constructs this STRUCT from metadata pulled from ServiceNow.
//
type {{.CiLabelCamelCase}}Post struct {
Result struct {
Attributes   struct {
{{- with .Result.Attributes}}
    {{- range  .}}
        {{- if $.IncludeAttribute .Element}}
            {{.AttributeCamelCase}}    string `json:"{{.Element}},omitempty"`
        {{- end}}
    {{- end}}
{{- end}}

} `json:"attributes"`
} `json:"result"`
}
// This is the structure where JSON data is Unmarshal'ed from ServiceNow.  This is different from the POST
// structure because it has to contain the "value", "link" and "display_value" fields for reference objects
//
// The generateprovidersource utility constructs this STRUCT from metadata pulled from ServiceNow.
//
type {{.CiLabelCamelCase}}Get struct {
Result struct {
Attributes   struct {
{{- with .Result.Attributes}}
    {{- range  .}}
        {{- if $.IncludeAttribute .Element}}
            {{- if .Reference}}
                {{.AttributeCamelCase}}    struct {
                Value   string `json:"value,omitempty"`
                Link    string `json:"link,omitempty"`
                DisplayValue string `json:"display_value,omitempty"`
                } `json:"{{.Element}}"`
            {{- else}}
                {{.AttributeCamelCase}}    string `json:"{{.Element}},omitempty"`
            {{- end}}
        {{- end}}
    {{- end}}
{{- end}}

} `json:"attributes"`
} `json:"result"`
}

// This is schema.resource for the ServiceNow Provider.  The resource name is appended
// to the name when the function is automatically generated using generateprovidersource
// to ensure uniqueness of the function within the package.
//
// There are two types of fields for ServiceNow:
//    1. basic types: string, int etc
//    2. Reference types: These are fields that contain a reference pointer to another object within
//       the ServiceNow Database.  For example "Location" is a reference field which stores a pointer
//       ("sys_id") to the corresponding Location record.  The "sys_id" is stored in the "value" field
//       returned from ServiceNow in the JSON payload.
//
// TODO: Need to construct a way of setting the "Computed", "Optional" and "Mandatory" switches.  I
//       think use a lookup stored in a separate file.  The user can edit this field to suite their
//       requirements for managing attributes and provides a method for setting these switches for
//       custom attributes.

func Resource{{.CiLabelCamelCase}}() *schema.Resource {
return &schema.Resource{
CreateContext: createResource{{.CiLabelCamelCase}},
ReadContext:   readResource{{.CiLabelCamelCase}},
UpdateContext: updateResource{{.CiLabelCamelCase}},
DeleteContext: deleteResource{{.CiLabelCamelCase}},

Importer: &schema.ResourceImporter{
State:schema.ImportStatePassthrough,
},

Schema: map[string]*schema.Schema{

{{- with .Result.Attributes}}
    {{- range .}}
        {{- if $.IncludeAttribute .Element}}
            {{- if .Reference}}
                "{{.Element}}" : {
                Type:     schema.TypeList,
                Optional: true,
                Computed: true,
                Elem: &schema.Resource{
                Schema: map[string]*schema.Schema{
                "display_value": {
                Type:     schema.TypeString,
                Optional: true,
                },
                "value": {
                Type:     schema.TypeString,
                Optional: true,
                },
                "link": {
                Type:     schema.TypeString,
                Computed: true,
                },
                },
                },
                },
            {{- else}}
                "{{.Element}}" : {
                Type:     schema.TypeString,
                {{- if ne .AttrFlags ""}}
                    {{.AttrFlags}},
                {{- end}}
                },
            {{- end}}
        {{- end}}
    {{- end}}
{{- end}}
},
}
}

//  Create routine - This function is called when Terraform wants to create a new CI in the ServiceNow CMDB
//
func createResource{{.CiLabelCamelCase}}(ctx context.Context,resourceData *schema.ResourceData, serviceNowClient interface{}) diag.Diagnostics {

servicenowClient := serviceNowClient.(*client.Client) //Client Connection details
// Use common function to update base attributes
var ci {{.CiLabelCamelCase}}Post
if err := copyFromTerraformToServiceNow{{.CiLabelCamelCase}}(resourceData, &ci); err != nil {
return diag.FromErr(err)
}

//t := time.Now()
//ci.Result.Attributes.Installdate = t.String()
//ci.Result.Attributes.SysCreatedOn = t.String()

// Using "sysparm fields=sys_id" reduces the amount of data received, we only need the sys_id for create action
SnowUrl := client.CMDBInstanceApi + CiName{{.CiName}} + "?sysparm_fields=sys_id"

jsonData, err := servicenowClient.RequestJSON("POST", SnowUrl, ci.Result)
if err != nil {
resourceData.SetId("")
return diag.FromErr(err)
}

resourceData.SetId(client.GetSysId(jsonData))
return readResource{{.CiLabelCamelCase}}(ctx,resourceData, serviceNowClient)
}

//  Read routine - This function is called when Terraform wants to create a new CI in the ServiceNow CMDB
//
func readResource{{.CiLabelCamelCase}}(ctx context.Context,resourceData *schema.ResourceData, serviceNowClient interface{}) diag.Diagnostics {

servicenowClient := serviceNowClient.(*client.Client)
SnowUrl := client.CMDBInstanceApi + CiName{{.CiName}} + "/" + resourceData.Id()
var jsonData []byte
jsonData, err := servicenowClient.RequestJSON("GET", SnowUrl, nil)
if err != nil {
resourceData.SetId("")
return diag.FromErr(err)
}

if err := copyFromServiceNowToTerraform{{.CiLabelCamelCase}}(resourceData,jsonData);  err != nil {
return diag.FromErr(err)
}

return nil
}

//  Update routine - This function is called when Terraform wants to create a new CI in the ServiceNow CMDB
//
func updateResource{{.CiLabelCamelCase}}(ctx context.Context,resourceData *schema.ResourceData, serviceNowClient interface{}) diag.Diagnostics {
servicenowClient := serviceNowClient.(*client.Client)

var ci {{.CiLabelCamelCase}}Post
if err := copyFromTerraformToServiceNow{{.CiLabelCamelCase}}(resourceData, &ci); err != nil {
return diag.FromErr(err)
}

SnowUrl := client.CMDBInstanceApi + CiName{{.CiName}} + "/" + resourceData.Id()
//jsonData, err := servicenowClient.RequestJSON("PATCH", SnowUrl, ci.Result)
_, err := servicenowClient.RequestJSON("PATCH", SnowUrl, ci.Result)
if err != nil {
resourceData.SetId("")
return diag.FromErr(err)
}
return readResource{{.CiLabelCamelCase}}(ctx,resourceData, serviceNowClient)
}

// TODO:  Need to work out what to do with deleting CIs. ServiceNow does not support deleting CIs via the API
//        CIs shouldn't be deleted because may be referenced by other objects in the ServiceNow database
//        (eg changes and incidents).  Therefore the best practice is to change their operational and
//        install status.  The tricky bit is working out how to make this flexible for everyone to use.

//  Delete routine - This function is called when Terraform wants to create a new CI in the ServiceNow CMDB
//
func deleteResource{{.CiLabelCamelCase}}(ctx context.Context,resourceData *schema.ResourceData, serviceNowClient interface{}) diag.Diagnostics {

//servicenowClient := serviceNowClient.(*Client)
var ci {{.CiLabelCamelCase}}Post
if err := copyFromTerraformToServiceNow{{.CiLabelCamelCase}}(resourceData, &ci); err != nil {
return diag.FromErr(err)
}

if err := resourceData.Set("install_status", "7"); err != nil {
//return fmt.Errorf("{{.CiLabelCamelCase}}failed to set install_status field during destroy action %s", err)
return diag.FromErr(err)
}

if err := resourceData.Set("operational_status", "6"); err != nil {
//return fmt.Errorf("{{.CiLabelCamelCase}}failed to set install_status field during destroy action %s", err)
return diag.FromErr(err)
}
//SnowUrl := CMDBInstanceApi + CiName{{.CiName}} + "/" + resourceData.Id()
//jsonData, err := servicenowClient.RequestJSON("PATCH", SnowUrl, ci.Result)
//_, err := servicenowClient.RequestJSON("PATCH", SnowUrl, ci.Result)
if err := updateResource{{.CiLabelCamelCase}}(ctx,resourceData, serviceNowClient); err != nil {
		return err
	}
//if err != nil {
//resourceData.SetId("")
//return err
//}
return nil
}

// This routine is called to copy data from the Terraform schema.ResourceData object into the CMDB CI object
// It would be nice if Terraform implemented a funciton to return a list of field names in a slice, this would
// make it easier to loop through the structure instead of doing a "Get" per field.
//
func copyFromTerraformToServiceNow{{.CiLabelCamelCase}} (resourceData *schema.ResourceData, ci *{{.CiLabelCamelCase}}Post) error {

attrs := &ci.Result.Attributes
{{- with .Result.Attributes}}
    {{- range .}}
        {{- if $.IncludeAttribute .Element}}
            {{- if .Reference}}
                //attrs.{{.AttributeCamelCase}}  = resourceData.Get("{{.Element}}.value").(string)
                attrs.{{.AttributeCamelCase}}  = client.FlattenLinkRel("{{.Element}}", resourceData)

            {{- else}}
                attrs.{{.AttributeCamelCase}}  = resourceData.Get("{{.Element}}").(string)
            {{- end}}
        {{- end}}
    {{- end}}
{{- end}}
return nil
}

// This function Unmarshal's the JSON payload from ServiceNow into a corresponding STRUCT for the CI.  It then
// Sets each field in the Terraform schema.ResourceData object with the corrsponding field from the CI STRUCT.
//
// NOTE:  Terraform expects a MAP for fields that represent "reference fields" so that the "value", "link" and
//        "display_value" are decoded correctly by Terraform.  The map is constructed for each reference field
//        using a common function called "StructToMap" in the "client_base.go" file.
//
func copyFromServiceNowToTerraform{{.CiLabelCamelCase}} (resourceData *schema.ResourceData, jsonData [] byte) error {
ci := {{.CiLabelCamelCase}}Get{}
if err := json.Unmarshal(jsonData, &ci); err != nil {
//resourceData.SetId("")
//return err
}

resourceData.SetId(client.GetSysId(jsonData))
attrs := ci.Result.Attributes
{{- with .Result.Attributes}}
    {{- range .}}
        {{- if $.IncludeAttribute .Element}}
            {{- if not .Reference}}
                _ = resourceData.Set("{{.Element}}", attrs.{{.AttributeCamelCase}})
            {{- else}}
                //_ = resourceData.Set("{{.Element}}", StructToMap(attrs.{{.AttributeCamelCase}}))
                _ = resourceData.Set("{{.Element}}", client.StructToList(attrs.{{.AttributeCamelCase}}.Value,attrs.{{.AttributeCamelCase}}.Link,attrs.{{.AttributeCamelCase}}.DisplayValue))

            {{- end}}
        {{- end}}
    {{- end}}
{{- end}}
return nil
}
